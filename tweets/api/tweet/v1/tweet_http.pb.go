// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type TweetsHTTPServer interface {
	CreateTweets(context.Context, *CreateRequest) (*CreateReply, error)
	GetTweetByTweetId(context.Context, *TweetIdRequest) (*TweetIdReply, error)
	GetTweetByUserId(context.Context, *UserIdRequest) (*UserIdReply, error)
}

func RegisterTweetsHTTPServer(s *http.Server, srv TweetsHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/tweet/", _Tweets_CreateTweets0_HTTP_Handler(srv))
	r.POST("/v1/tweetsuserId/", _Tweets_GetTweetByUserId0_HTTP_Handler(srv))
	r.POST("/v1/tweetId/", _Tweets_GetTweetByTweetId0_HTTP_Handler(srv))
}

func _Tweets_CreateTweets0_HTTP_Handler(srv TweetsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/tweet.v1.Tweets/CreateTweets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTweets(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _Tweets_GetTweetByUserId0_HTTP_Handler(srv TweetsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/tweet.v1.Tweets/GetTweetByUserId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTweetByUserId(ctx, req.(*UserIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserIdReply)
		return ctx.Result(200, reply)
	}
}

func _Tweets_GetTweetByTweetId0_HTTP_Handler(srv TweetsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TweetIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/tweet.v1.Tweets/GetTweetByTweetId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTweetByTweetId(ctx, req.(*TweetIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TweetIdReply)
		return ctx.Result(200, reply)
	}
}

type TweetsHTTPClient interface {
	CreateTweets(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	GetTweetByTweetId(ctx context.Context, req *TweetIdRequest, opts ...http.CallOption) (rsp *TweetIdReply, err error)
	GetTweetByUserId(ctx context.Context, req *UserIdRequest, opts ...http.CallOption) (rsp *UserIdReply, err error)
}

type TweetsHTTPClientImpl struct {
	cc *http.Client
}

func NewTweetsHTTPClient(client *http.Client) TweetsHTTPClient {
	return &TweetsHTTPClientImpl{client}
}

func (c *TweetsHTTPClientImpl) CreateTweets(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/v1/tweet/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/tweet.v1.Tweets/CreateTweets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TweetsHTTPClientImpl) GetTweetByTweetId(ctx context.Context, in *TweetIdRequest, opts ...http.CallOption) (*TweetIdReply, error) {
	var out TweetIdReply
	pattern := "/v1/tweetId/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/tweet.v1.Tweets/GetTweetByTweetId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TweetsHTTPClientImpl) GetTweetByUserId(ctx context.Context, in *UserIdRequest, opts ...http.CallOption) (*UserIdReply, error) {
	var out UserIdReply
	pattern := "/v1/tweetsuserId/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/tweet.v1.Tweets/GetTweetByUserId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
