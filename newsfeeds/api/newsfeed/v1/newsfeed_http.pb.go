// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NewsFeedHTTPServer interface {
	CreateNewsFeed(context.Context, *CreateRequest) (*CreateReply, error)
	ListFollowTweet(context.Context, *ListRequest) (*ListReply, error)
}

func RegisterNewsFeedHTTPServer(s *http.Server, srv NewsFeedHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/newsfeed/", _NewsFeed_CreateNewsFeed0_HTTP_Handler(srv))
	r.POST("/v1/newsfeed/list", _NewsFeed_ListFollowTweet0_HTTP_Handler(srv))
}

func _NewsFeed_CreateNewsFeed0_HTTP_Handler(srv NewsFeedHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/newsfeed.v1.NewsFeed/CreateNewsFeed")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNewsFeed(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _NewsFeed_ListFollowTweet0_HTTP_Handler(srv NewsFeedHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/newsfeed.v1.NewsFeed/ListFollowTweet")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowTweet(ctx, req.(*ListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReply)
		return ctx.Result(200, reply)
	}
}

type NewsFeedHTTPClient interface {
	CreateNewsFeed(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	ListFollowTweet(ctx context.Context, req *ListRequest, opts ...http.CallOption) (rsp *ListReply, err error)
}

type NewsFeedHTTPClientImpl struct {
	cc *http.Client
}

func NewNewsFeedHTTPClient(client *http.Client) NewsFeedHTTPClient {
	return &NewsFeedHTTPClientImpl{client}
}

func (c *NewsFeedHTTPClientImpl) CreateNewsFeed(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/v1/newsfeed/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/newsfeed.v1.NewsFeed/CreateNewsFeed"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NewsFeedHTTPClientImpl) ListFollowTweet(ctx context.Context, in *ListRequest, opts ...http.CallOption) (*ListReply, error) {
	var out ListReply
	pattern := "/v1/newsfeed/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/newsfeed.v1.NewsFeed/ListFollowTweet"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
