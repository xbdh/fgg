// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TweetsClient is the client API for Tweets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetsClient interface {
	// Sends a greeting
	CreateTweets(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	GetTweetByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserIdReply, error)
	GetTweetByTweetId(ctx context.Context, in *TweetIdRequest, opts ...grpc.CallOption) (*TweetIdReply, error)
}

type tweetsClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetsClient(cc grpc.ClientConnInterface) TweetsClient {
	return &tweetsClient{cc}
}

func (c *tweetsClient) CreateTweets(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/tweet.v1.Tweets/CreateTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetsClient) GetTweetByUserId(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*UserIdReply, error) {
	out := new(UserIdReply)
	err := c.cc.Invoke(ctx, "/tweet.v1.Tweets/GetTweetByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetsClient) GetTweetByTweetId(ctx context.Context, in *TweetIdRequest, opts ...grpc.CallOption) (*TweetIdReply, error) {
	out := new(TweetIdReply)
	err := c.cc.Invoke(ctx, "/tweet.v1.Tweets/GetTweetByTweetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetsServer is the server API for Tweets service.
// All implementations must embed UnimplementedTweetsServer
// for forward compatibility
type TweetsServer interface {
	// Sends a greeting
	CreateTweets(context.Context, *CreateRequest) (*CreateReply, error)
	GetTweetByUserId(context.Context, *UserIdRequest) (*UserIdReply, error)
	GetTweetByTweetId(context.Context, *TweetIdRequest) (*TweetIdReply, error)
	mustEmbedUnimplementedTweetsServer()
}

// UnimplementedTweetsServer must be embedded to have forward compatible implementations.
type UnimplementedTweetsServer struct {
}

func (UnimplementedTweetsServer) CreateTweets(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweets not implemented")
}
func (UnimplementedTweetsServer) GetTweetByUserId(context.Context, *UserIdRequest) (*UserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetByUserId not implemented")
}
func (UnimplementedTweetsServer) GetTweetByTweetId(context.Context, *TweetIdRequest) (*TweetIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweetByTweetId not implemented")
}
func (UnimplementedTweetsServer) mustEmbedUnimplementedTweetsServer() {}

// UnsafeTweetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetsServer will
// result in compilation errors.
type UnsafeTweetsServer interface {
	mustEmbedUnimplementedTweetsServer()
}

func RegisterTweetsServer(s grpc.ServiceRegistrar, srv TweetsServer) {
	s.RegisterService(&Tweets_ServiceDesc, srv)
}

func _Tweets_CreateTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetsServer).CreateTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.v1.Tweets/CreateTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetsServer).CreateTweets(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweets_GetTweetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetsServer).GetTweetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.v1.Tweets/GetTweetByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetsServer).GetTweetByUserId(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tweets_GetTweetByTweetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetsServer).GetTweetByTweetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.v1.Tweets/GetTweetByTweetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetsServer).GetTweetByTweetId(ctx, req.(*TweetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tweets_ServiceDesc is the grpc.ServiceDesc for Tweets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tweets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweet.v1.Tweets",
	HandlerType: (*TweetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTweets",
			Handler:    _Tweets_CreateTweets_Handler,
		},
		{
			MethodName: "GetTweetByUserId",
			Handler:    _Tweets_GetTweetByUserId_Handler,
		},
		{
			MethodName: "GetTweetByTweetId",
			Handler:    _Tweets_GetTweetByTweetId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tweet/v1/ttt.proto",
}
