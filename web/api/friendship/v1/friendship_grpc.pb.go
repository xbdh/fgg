// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendshipClient is the client API for Friendship service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipClient interface {
	CreateFriendship(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Followings(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error)
	Followers(ctx context.Context, in *FollowerRequest, opts ...grpc.CallOption) (*FollowerReply, error)
}

type friendshipClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipClient(cc grpc.ClientConnInterface) FriendshipClient {
	return &friendshipClient{cc}
}

func (c *friendshipClient) CreateFriendship(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/friendship.v1.Friendship/CreateFriendship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipClient) Followings(ctx context.Context, in *FollowingRequest, opts ...grpc.CallOption) (*FollowingReply, error) {
	out := new(FollowingReply)
	err := c.cc.Invoke(ctx, "/friendship.v1.Friendship/Followings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipClient) Followers(ctx context.Context, in *FollowerRequest, opts ...grpc.CallOption) (*FollowerReply, error) {
	out := new(FollowerReply)
	err := c.cc.Invoke(ctx, "/friendship.v1.Friendship/Followers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServer is the server API for Friendship service.
// All implementations must embed UnimplementedFriendshipServer
// for forward compatibility
type FriendshipServer interface {
	CreateFriendship(context.Context, *CreateRequest) (*CreateReply, error)
	Followings(context.Context, *FollowingRequest) (*FollowingReply, error)
	Followers(context.Context, *FollowerRequest) (*FollowerReply, error)
	mustEmbedUnimplementedFriendshipServer()
}

// UnimplementedFriendshipServer must be embedded to have forward compatible implementations.
type UnimplementedFriendshipServer struct {
}

func (UnimplementedFriendshipServer) CreateFriendship(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendship not implemented")
}
func (UnimplementedFriendshipServer) Followings(context.Context, *FollowingRequest) (*FollowingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followings not implemented")
}
func (UnimplementedFriendshipServer) Followers(context.Context, *FollowerRequest) (*FollowerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Followers not implemented")
}
func (UnimplementedFriendshipServer) mustEmbedUnimplementedFriendshipServer() {}

// UnsafeFriendshipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServer will
// result in compilation errors.
type UnsafeFriendshipServer interface {
	mustEmbedUnimplementedFriendshipServer()
}

func RegisterFriendshipServer(s grpc.ServiceRegistrar, srv FriendshipServer) {
	s.RegisterService(&Friendship_ServiceDesc, srv)
}

func _Friendship_CreateFriendship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).CreateFriendship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.v1.Friendship/CreateFriendship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).CreateFriendship(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friendship_Followings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).Followings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.v1.Friendship/Followings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).Followings(ctx, req.(*FollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friendship_Followers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServer).Followers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friendship.v1.Friendship/Followers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServer).Followers(ctx, req.(*FollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Friendship_ServiceDesc is the grpc.ServiceDesc for Friendship service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friendship_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friendship.v1.Friendship",
	HandlerType: (*FriendshipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendship",
			Handler:    _Friendship_CreateFriendship_Handler,
		},
		{
			MethodName: "Followings",
			Handler:    _Friendship_Followings_Handler,
		},
		{
			MethodName: "Followers",
			Handler:    _Friendship_Followers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/friendship/v1/friendship.proto",
}
