// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsFeedClient is the client API for NewsFeed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsFeedClient interface {
	CreateNewsFeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	ListFollowTweet(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type newsFeedClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsFeedClient(cc grpc.ClientConnInterface) NewsFeedClient {
	return &newsFeedClient{cc}
}

func (c *newsFeedClient) CreateNewsFeed(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/newsfeed.v1.NewsFeed/CreateNewsFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsFeedClient) ListFollowTweet(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/newsfeed.v1.NewsFeed/ListFollowTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsFeedServer is the server API for NewsFeed service.
// All implementations must embed UnimplementedNewsFeedServer
// for forward compatibility
type NewsFeedServer interface {
	CreateNewsFeed(context.Context, *CreateRequest) (*CreateReply, error)
	ListFollowTweet(context.Context, *ListRequest) (*ListReply, error)
	mustEmbedUnimplementedNewsFeedServer()
}

// UnimplementedNewsFeedServer must be embedded to have forward compatible implementations.
type UnimplementedNewsFeedServer struct {
}

func (UnimplementedNewsFeedServer) CreateNewsFeed(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewsFeed not implemented")
}
func (UnimplementedNewsFeedServer) ListFollowTweet(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowTweet not implemented")
}
func (UnimplementedNewsFeedServer) mustEmbedUnimplementedNewsFeedServer() {}

// UnsafeNewsFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsFeedServer will
// result in compilation errors.
type UnsafeNewsFeedServer interface {
	mustEmbedUnimplementedNewsFeedServer()
}

func RegisterNewsFeedServer(s grpc.ServiceRegistrar, srv NewsFeedServer) {
	s.RegisterService(&NewsFeed_ServiceDesc, srv)
}

func _NewsFeed_CreateNewsFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFeedServer).CreateNewsFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsfeed.v1.NewsFeed/CreateNewsFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFeedServer).CreateNewsFeed(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsFeed_ListFollowTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFeedServer).ListFollowTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newsfeed.v1.NewsFeed/ListFollowTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFeedServer).ListFollowTweet(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsFeed_ServiceDesc is the grpc.ServiceDesc for NewsFeed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsFeed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newsfeed.v1.NewsFeed",
	HandlerType: (*NewsFeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewsFeed",
			Handler:    _NewsFeed_CreateNewsFeed_Handler,
		},
		{
			MethodName: "ListFollowTweet",
			Handler:    _NewsFeed_ListFollowTweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/newsfeed/v1/newsfeed.proto",
}
