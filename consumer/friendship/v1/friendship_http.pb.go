// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FriendshipHTTPServer interface {
	CreateFriendship(context.Context, *CreateRequest) (*CreateReply, error)
	Followers(context.Context, *FollowerRequest) (*FollowerReply, error)
	Followings(context.Context, *FollowingRequest) (*FollowingReply, error)
}

func RegisterFriendshipHTTPServer(s *http.Server, srv FriendshipHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/friendship/", _Friendship_CreateFriendship0_HTTP_Handler(srv))
	r.POST("/v1/friendship/ings", _Friendship_Followings0_HTTP_Handler(srv))
	r.POST("/v1/friendship/ers", _Friendship_Followers0_HTTP_Handler(srv))
}

func _Friendship_CreateFriendship0_HTTP_Handler(srv FriendshipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/friendship.v1.Friendship/CreateFriendship")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFriendship(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _Friendship_Followings0_HTTP_Handler(srv FriendshipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/friendship.v1.Friendship/Followings")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Followings(ctx, req.(*FollowingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowingReply)
		return ctx.Result(200, reply)
	}
}

func _Friendship_Followers0_HTTP_Handler(srv FriendshipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/friendship.v1.Friendship/Followers")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Followers(ctx, req.(*FollowerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowerReply)
		return ctx.Result(200, reply)
	}
}

type FriendshipHTTPClient interface {
	CreateFriendship(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	Followers(ctx context.Context, req *FollowerRequest, opts ...http.CallOption) (rsp *FollowerReply, err error)
	Followings(ctx context.Context, req *FollowingRequest, opts ...http.CallOption) (rsp *FollowingReply, err error)
}

type FriendshipHTTPClientImpl struct {
	cc *http.Client
}

func NewFriendshipHTTPClient(client *http.Client) FriendshipHTTPClient {
	return &FriendshipHTTPClientImpl{client}
}

func (c *FriendshipHTTPClientImpl) CreateFriendship(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/v1/friendship/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/friendship.v1.Friendship/CreateFriendship"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FriendshipHTTPClientImpl) Followers(ctx context.Context, in *FollowerRequest, opts ...http.CallOption) (*FollowerReply, error) {
	var out FollowerReply
	pattern := "/v1/friendship/ers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/friendship.v1.Friendship/Followers"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FriendshipHTTPClientImpl) Followings(ctx context.Context, in *FollowingRequest, opts ...http.CallOption) (*FollowingReply, error) {
	var out FollowingReply
	pattern := "/v1/friendship/ings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/friendship.v1.Friendship/Followings"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
